#include "pin.H"
#include <iostream>
#include <fstream>
#include <map>
#include <vector>
#include <algorithm>
using std::hex;
using std::cerr;
using std::string;
using std::ios;
using std::endl;

std::ofstream TraceFile;
std::map<string, int> RoutineExecutionCounts;
int TotalExecutions = 0; // To keep track of the total number of executions

KNOB<string> KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "calltrace.out", "specify trace file name");

INT32 Usage()
{
    cerr << "This tool produces a call trace and finds the most frequently executed routine." << endl << endl;
    cerr << KNOB_BASE::StringKnobSummary() << endl;
    return -1;
}

VOID OnRoutineEntry(const string &routineName)
{
    // Increment the execution count for the routine
    RoutineExecutionCounts[routineName]++;
    TotalExecutions++; // Increment the total number of executions
}

// Custom sorting function for routines based on execution counts
bool SortRoutines(const std::pair<string, int> &a, const std::pair<string, int> &b)
{
    return a.second > b.second; // Sort in descending order
}

VOID Trace(TRACE trace, VOID *v)
{
    for (BBL bbl = TRACE_BblHead(trace); BBL_Valid(bbl); bbl = BBL_Next(bbl))
    {
        INS tail = BBL_InsTail(bbl);

        if (INS_IsCall(tail))
        {
            if (INS_IsDirectControlFlow(tail))
            {
                const ADDRINT target = INS_DirectControlFlowTargetAddress(tail);
                RTN rtn = RTN_FindByAddress(target);

                if (RTN_Valid(rtn))
                {
                    const string routineName = RTN_Name(rtn);
                    OnRoutineEntry(routineName);
                }
            }
        }
    }
}

VOID Fini(INT32 code, VOID *v)
{
    TraceFile << "Total Executions: " << TotalExecutions << endl;
    TraceFile << "Most Frequently Executed Routines:" << endl;

    // Create a vector of pairs for sorting
    std::vector<std::pair<string, int>> sortedRoutines(RoutineExecutionCounts.begin(), RoutineExecutionCounts.end());

    // Sort the routines based on execution counts
    std::sort(sortedRoutines.begin(), sortedRoutines.end(), SortRoutines);

    for (const auto &entry : sortedRoutines)
    {
        const string &routineName = entry.first;
        const int executionCount = entry.second;

        TraceFile << routineName << ": " << executionCount << " times" << endl;
    }

    TraceFile << "# eof" << endl;
    TraceFile.close();
}

int main(int argc, char *argv[])
{
    PIN_InitSymbols();

    if (PIN_Init(argc, argv))
    {
        return Usage();
    }

    TraceFile.open(KnobOutputFile.Value().c_str());

    TraceFile << hex;
    TraceFile.setf(ios::showbase);

    string traceHeader = "# Call Trace and Most Frequently Executed Routines Generated By Pin\n";

    TraceFile.write(traceHeader.c_str(), traceHeader.size());

    TRACE_AddInstrumentFunction(Trace, 0);
    PIN_AddFiniFunction(Fini, 0);

    PIN_StartProgram();

    return 0;
}
